import { fmt } from './formatters.js';

// Function to handle the "–ù–∞–π—Ç–∏" (Find) button logic and "–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç" in the Alerts modal
export function setupAlertsModal(drawer) {
  const alertFindBtn = drawer.querySelector('#alertFind');
  const alertSymInput = drawer.querySelector('#alertSym');
  const liveDisplay = drawer.querySelector('#liveTickerDisplay');
  const liveSymbol = drawer.querySelector('#liveTickerSymbol');
  const livePrice = drawer.querySelector('#liveTickerPrice');
  const alertPriceInput = drawer.querySelector('#alertPrice');
  const alertCreateBtn = drawer.querySelector('#alertCreate');
  const alertsList = drawer.querySelector('#activeAlertsList');
  
  let currentLiveSymbol = alertSymInput.value.trim().toUpperCase();

  // Helper to format price (simple simulation)
  function formatPrice(price) {
    return fmt(price, 2);
  }

  // 1. "–ù–∞–π—Ç–∏" (Find) button logic
  if (alertFindBtn && alertSymInput) {
    alertFindBtn.addEventListener('click', () => {
      let sym = alertSymInput.value.trim().toUpperCase();
      if (sym && !sym.endsWith('USDT')) {
        sym += 'USDT';
      }
      alertSymInput.value = sym;
      currentLiveSymbol = sym;
      
      // Simulate fetching live price
      const simulatedPrice = (Math.random() * 10000 + 20000); // e.g., 20000 to 30000
      
      liveSymbol.textContent = sym;
      livePrice.textContent = formatPrice(simulatedPrice);
      liveDisplay.style.display = 'flex'; // Show the live display
      
      console.log('Searching for ticker:', sym);
    });
  }

  // 2. "–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç" (Create Alert) button logic
  if (alertCreateBtn && alertPriceInput && alertsList) {
    alertCreateBtn.addEventListener('click', () => {
      const targetPrice = alertPriceInput.value.trim();
      if (!currentLiveSymbol || !targetPrice) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É.');
        return;
      }

      const priceNum = parseFloat(targetPrice.replace(/\s/g, ''));
      if (isNaN(priceNum) || priceNum <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É.');
        return;
      }

      const now = new Date();
      const timeStr = now.toLocaleTimeString('ru-RU');
      
      // Create the alert element
      const alertElement = document.createElement('div');
      alertElement.className = 'row';
      alertElement.style.cssText = 'margin-bottom: 6px; padding: 4px 0; border-bottom: 1px dashed rgba(64,64,64,.5);';
      alertElement.innerHTML = `
        <span class="mono n-blue" style="flex:1 1 80px;">${currentLiveSymbol}</span>
        <span class="mono n-green" style="flex:1 1 80px;">> ${formatPrice(priceNum)}</span>
        <span class="mini mono" style="flex:0 1 100px;">${timeStr}</span>
        <span class="mini mono" style="flex:0 1 40px;">üü¢</span>
        <button class="btn delete-alert-btn" style="flex:0 1 auto; padding: 4px 8px; font-size: 12px; background: var(--red); border: none;">–£–¥–∞–ª–∏—Ç—å</button>
      `;

      // Remove the "–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø—É—Å—Ç" message if it exists
      const emptyMessage = alertsList.querySelector('.mini.mono');
      if (emptyMessage && emptyMessage.textContent.includes('–ø—É—Å—Ç')) {
        alertsList.innerHTML = '';
      }

      // Add the new alert
      alertsList.prepend(alertElement); // Add to the top

      // Add delete functionality
      alertElement.querySelector('.delete-alert-btn').addEventListener('click', (e) => {
        e.target.closest('.row').remove();
        // Re-add the "empty" message if the list is now empty
        if (alertsList.children.length === 0) {
          alertsList.innerHTML = '<div class="mini mono" style="color:var(--muted)">–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø—É—Å—Ç.</div>';
        }
      });

      // Clear the price input
      alertPriceInput.value = '';
    });
  }
}

// Function that generates the content of the modal window based on the title
export function generateDrawerContent(title) {
  let content = '';
  let apiPath = '';

  switch (title) {
    case '–ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥':
      apiPath = '/api/leaderboard';
      content = `
        <div>–ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥ ByAgent Alpha</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–°–ø—Ä–µ–¥—ã':
      apiPath = '/api/spreads';
      content = `
        <div>–°–ø—Ä–µ–¥—ã ‚Ä¢ BTCUSDT</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case 'DeFi':
      apiPath = '/api/defi';
      content = `
        <div>DeFi –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ‚Ä¢ BTC</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–°–∏–≥–Ω–∞–ª—ã 10x':
      content = `
        <div>–°–∏–≥–Ω–∞–ª—ã 10x</div>
        <div class="mini mono" style="margin-top:4px;">–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</div>
      `;
      break;
    case '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
      content = `
        <div style="display:flex; align-items:center; gap:8px;"><span style="font-size:20px;">‚≠ê</span> –ò–∑–±—Ä–∞–Ω–Ω–æ–µ</div>
        <div class="row" style="margin-top:10px;">
          <input class="input" placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä. BTC)" style="flex:1 1 200px;"/>
          <button class="btn">–î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
        <div class="mini" style="margin-top:10px;">–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Ç–∏–∫–µ—Ä –≤—ã—à–µ, –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.</div>
      `;
      break;
    case 'Wallet':
      content = `
        <div style="display:flex; align-items:center; justify-content:space-between;">
          <span>Wallet / –ü–æ–¥–ø–∏—Å–∫–∞ (TON)</span>
          <span class="mini mono n-red">–ù–µ –∞–∫—Ç–∏–≤–Ω–∞</span>
        </div>
        <h3 style="margin:16px 0 8px 0; color:var(--text);">Wallet / –ü–æ–¥–ø–∏—Å–∫–∞</h3>
        <div class="row">
          <button class="btn" style="flex:0 1 auto;">–ü–æ–¥–∫–ª—é—á–∏—Ç—å TON Wallet</button>
          <div class="pill"><span class="k mono">–ê–¥—Ä–µ—Å:</span><span class="mono">‚Äî</span></div>
          <div class="pill"><span class="k mono">–ë–∞–ª–∞–Ω—Å:</span><span class="mono">‚Äî</span></div>
        </div>
        <h3 style="margin:16px 0 8px 0; color:var(--text);">–ü–æ–¥–ø–∏—Å–∫–∞ ByAgent ‚Äî –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π</h3>
        <div class="mini mono" style="margin-bottom:12px;">–°—Ç–æ–∏–º–æ—Å—Ç—å: 2 TON (–¥–µ–º–æ-–æ–ø–ª–∞—Ç–∞)</div>
        <div class="row" style="align-items:center; gap:16px;">
          <label style="display:flex; align-items:center; gap:8px;">
            <input type="checkbox" style="width:16px; height:16px;"> –Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          </label>
          <label style="display:flex; align-items:center; gap:8px;">
            <input type="checkbox" style="width:16px; height:16px;"> –°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
          </label>
        </div>
        <button class="btn" style="margin-top:20px; flex:0 1 auto;">–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 2 TON</button>
        <div class="mini mono" style="margin-top:8px; color:var(--muted)">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –æ–±–∞ —á–µ–∫–±–æ–∫—Å–∞</div>
      `;
      break;
    case '–ê–ª–µ—Ä—Ç—ã':
      content = `
        <div>–ê–ª–µ—Ä—Ç—ã</div>
        <div class="row" style="margin-top:10px; align-items:center;">
          <span style="font-size:20px;">‚ö†Ô∏è</span>
          <div class="mini mono" style="flex:1 1 auto;">–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ <a href="https://t.me/By_agent_bot" target="_blank" style="color:var(--silver);">@By_agent_bot</a> –∏ –Ω–∞–∂–º–∏ Start.</div>
          <button class="btn" style="flex:0 1 auto;">–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞</button>
        </div>
        <h3 style="margin:20px 0 8px 0; color:var(--text); display:flex; justify-content:space-between; align-items:center;">
          <span>–¶–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã</span>
          <span class="mini mono">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram</span>
        </h3>
        <!-- Live Ticker and Price Display -->
        <div id="liveTickerDisplay" class="card" style="margin-bottom: 10px; padding: 10px; display: none; align-items: center; justify-content: space-between;">
          <span id="liveTickerSymbol" class="mono sym n-blue" style="font-size: 1.2em;">‚Äî</span>
          <span id="liveTickerPrice" class="mono n-green" style="font-size: 1.2em;">‚Äî</span>
        </div>
        <!-- Ticker Search Row -->
        <div class="row" style="gap:8px; margin-bottom: 8px;">
          <input id="alertSym" class="input" value="BTCUSDT" placeholder="–¢–∏–∫–µ—Ä (–Ω–∞–ø—Ä. BTC)" style="flex:1 1 180px;"/>
          <button id="alertFind" class="btn" style="flex:0 1 auto; padding: 11px 16px;">–ù–∞–π—Ç–∏</button>
        </div>
        <!-- Alert Creation Row -->
        <div class="row" style="gap:8px;">
          <input id="alertPrice" class="input" placeholder="–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞" style="flex:1 1 180px;"/>
          <button id="alertCreate" class="btn" style="flex:0 1 auto; padding: 11px 16px;">–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç</button>
        </div>
        <div class="mini mono" style="margin-top:8px; color:var(--muted)">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.</div>

        <h3 style="margin:20px 0 8px 0; color:var(--text);">–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</h3>
        <div id="activeAlertsList" style="border: 1px solid var(--border); border-radius: 12px; padding: 10px; background: rgba(0,0,0,.15); max-height: 200px; overflow-y: auto;">
          <div class="mini mono" style="color:var(--muted)">–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø—É—Å—Ç.</div>
        </div>
      `;
      break;
    case '–°–µ—Ç–∞–ø—ã':
      apiPath = '/api/setups';
      content = `
        <div>–°–µ—Ç–∞–ø—ã (—Ç–æ–ø-10)</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–ê–Ω–æ–º–∞–ª–∏–∏':
      apiPath = '/api/anomalies';
      content = `
        <div>–ê–Ω–æ–º–∞–ª–∏–∏</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–¢–æ–ø —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ':
      apiPath = '/api/movers';
      content = `
        <div>–¢–æ–ø —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ</div>
        <div class="seg" style="margin-top:10px;">
          <button class="active" style="flex:0 1 auto;"><span style="font-size:16px;">üöÄ</span> –¢–æ–ø —Ä–∞—Å—Ç—É—â–∏–µ</button>
          <button style="flex:0 1 auto;"><span style="font-size:16px;">ü™Ç</span> –¢–æ–ø –ø–∞–¥–∞—é—â–∏–µ</button>
        </div>
        <div class="mini mono" style="margin-top:10px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–¥–µ–º–æ). –ü–æ–¥–∫–ª—é—á–∏–º ${apiPath} –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.</div>
      `;
      break;
    case '–õ–∏—Å—Ç–∏–Ω–≥–∏':
      apiPath = '/api/listings';
      content = `
        <div>–õ–∏—Å—Ç–∏–Ω–≥–∏ (–Ω–æ–≤—ã–µ / –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å App':
      apiPath = '/api/stats';
      content = `
        <div>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    default:
      content = `<p class="mini">–ú–æ–¥—É–ª—å ¬´${title}¬ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</p>`;
      break;
  }

  return content;
}
